---
// NutritionFacts.astro (SSG)
import { fetchIngredientNutrition } from "@services/ingredients";

const { ingredients } = Astro.props as { ingredients: Record<string, number> };

// Fetch ingredient nutrition data once during build
const nutritionData = await fetchIngredientNutrition(Object.keys(ingredients));

// Calculate total values
let totalWeight = 0;
let totals = {
  fat: 0,
  protein: 0,
  carbs: 0,
  fiber: 0,
  sugar: 0,
  sodium: 0,
  cholesterol: 0,
};

for (const [ingredient, weight] of Object.entries(ingredients)) {
  const data = nutritionData[ingredient];
  if (!data) continue;

  totalWeight += weight;
  totals.fat += (data.fat * weight) / 100;
  totals.protein += (data.protein * weight) / 100;
  totals.carbs += (data.carbs * weight) / 100;
  totals.fiber += (data.fiber * weight) / 100;
  totals.sugar += (data.sugar * weight) / 100;
  totals.sodium += (data.sodium * weight) / 100;
  totals.cholesterol += (data.cholesterol * weight) / 100;
}

// Normalize values per 100g
const per100g = totalWeight
  ? {
      fat: (totals.fat / totalWeight) * 100,
      protein: (totals.protein / totalWeight) * 100,
      carbs: (totals.carbs / totalWeight) * 100,
      fiber: (totals.fiber / totalWeight) * 100,
      sugar: (totals.sugar / totalWeight) * 100,
      sodium: (totals.sodium / totalWeight) * 100,
      cholesterol: (totals.cholesterol / totalWeight) * 100,
    }
  : totals;
---

<table>
  <tr><th>Nutrient</th><th>Per 100g</th></tr>
  <tr><td>Fat</td><td>{per100g.fat.toFixed(2)} g</td></tr>
  <tr><td>Protein</td><td>{per100g.protein.toFixed(2)} g</td></tr>
  <tr><td>Carbohydrates</td><td>{per100g.carbs.toFixed(2)} g</td></tr>
  <tr><td>Fiber</td><td>{per100g.fiber.toFixed(2)} g</td></tr>
  <tr><td>Sugar</td><td>{per100g.sugar.toFixed(2)} g</td></tr>
  <tr><td>Sodium</td><td>{per100g.sodium.toFixed(2)} mg</td></tr>
  <tr><td>Cholesterol</td><td>{per100g.cholesterol.toFixed(2)} mg</td></tr>
</table>
