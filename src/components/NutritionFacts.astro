---
import { calculateNutritionFacts } from "@/lib/utils";
import { getIngredientsData } from "@/services/ingredients";

// NutritionFacts.astro (SSG)

const { ingredients } = Astro.props as {
  ingredients: { name: string; quantity: string; grams: number; id: number }[];
};

// Fetch ingredient nutrition data once during build
const fullIngredientsData = await getIngredientsData(
  ingredients.map((i) => i.id)
);

// Calculate per 100g values
const per100g = calculateNutritionFacts(ingredients, fullIngredientsData);
---

<table>
  <tr><th>Nutrient</th><th>Per 100g</th></tr>
  <tr><td>Calories</td><td>{per100g.calories.toFixed(2)} kcal</td></tr>
  <tr><td>Total Fat</td><td>{per100g.totalFat.toFixed(2)} g</td></tr>
  <tr><td>Saturated Fat</td><td>{per100g.saturatedFat.toFixed(2)} g</td></tr>
  <tr><td>Trans Fat</td><td>{per100g.transFat.toFixed(2)} g</td></tr>
  <tr
    ><td>Polyunsaturated Fat</td><td
      >{per100g.polyunsaturatedFat.toFixed(2)} g</td
    ></tr
  >
  <tr
    ><td>Monounsaturated Fat</td><td
      >{per100g.monounsaturatedFat.toFixed(2)} g</td
    ></tr
  >
  {
    per100g.cholesterol > 0 && (
      <tr>
        <td>Cholesterol</td>
        <td>{per100g.cholesterol * 1000} mg</td>
      </tr>
    )
  }
  {
    per100g.sodium > 0 && (
      <tr>
        <td>Sodium</td>
        <td>{per100g.sodium * 1000} mg</td>
      </tr>
    )
  }
  <tr><td>Total Carbohydrates</td><td>{per100g.totalCarbs.toFixed(2)} g</td></tr
  >
  <tr><td>Dietary Fiber</td><td>{per100g.dietaryFiber.toFixed(2)} g</td></tr>
  <tr><td>Sugars</td><td>{per100g.sugars.toFixed(2)} g</td></tr>
  <tr><td>Protein</td><td>{per100g.protein.toFixed(2)} g</td></tr>
</table>
