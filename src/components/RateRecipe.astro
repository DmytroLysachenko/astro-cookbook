---
import { db } from "@/db";
import { rates } from "@/db/schema/rates";
import { recipes } from "@/db/schema/recipes";
import { and, eq } from "drizzle-orm";

const { recipeId, userId } = Astro.props;

console.log(recipeId, userId);

const rating =
  (await db
    .select()
    .from(rates)
    .where(and(eq(recipes.id, recipeId), eq(rates.userId, userId)))
    .then((rate) => rate[0]?.rate)) ?? 0;
---

<p>Rate this recipe</p>
<div id="rating-stars">
  <!-- Star buttons for rating -->
  <button
    data-rating="1"
    onclick="rateRecipe(1)"
    class={rating >= 1 ? "rated" : ""}
    >{rating >= 1 ? "⭐️" : "⭐"}</button
  >
  <button
    data-rating="2"
    onclick="rateRecipe(2)"
    class={rating >= 2 ? "rated" : ""}
    >{rating >= 2 ? "⭐️" : "⭐"}</button
  >
  <button
    data-rating="3"
    onclick="rateRecipe(3)"
    class={rating >= 3 ? "rated" : ""}
    >{rating >= 3 ? "⭐️" : "⭐"}</button
  >
  <button
    data-rating="4"
    onclick="rateRecipe(4)"
    class={rating >= 4 ? "rated" : ""}
    >{rating >= 4 ? "⭐️" : "⭐"}</button
  >
  <button
    data-rating="5"
    onclick="rateRecipe(5)"
    class={rating >= 5 ? "rated" : ""}
    >{rating >= 5 ? "⭐️" : "⭐"}</button
  >
</div>

<script define:vars={[recipeId, userId]}>
  /**
   * Rate or unrate a recipe.
   * @param {number} rating - The rating value (1-5).
   */

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async function rateRecipe(rating) {
    try {
      const response = await fetch("/api/rate-recipe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, recipeId, rating }),
      });

      if (response.ok) {
        // Update the UI to reflect the new rating
        updateStars(rating);
      } else {
        console.error("Failed to rate/unrate recipe");
      }
    } catch (error) {
      console.error("Error:", error);
    }
  }

  /**
   * Update the star UI to reflect the current rating.
   * @param {number} rating - The rating value (1-5).
   */
  function updateStars(rating) {
    const stars = document.querySelectorAll("#rating-stars button");
    stars.forEach((star, index) => {
      const starRating = index + 1;
      if (starRating <= rating) {
        star.classList.add("rated");
        star.textContent = "⭐️"; // Filled star
      } else {
        star.classList.remove("rated");
        star.textContent = "⭐"; // Empty star
      }
    });
  }
</script>
