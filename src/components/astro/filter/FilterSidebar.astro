---
import FilterSection from "./FilterSection.astro";
import { capitalize } from "@/lib/utils";

interface Props {
  categories: string[];
  cuisines: string[];
  currentCategory?: string;
  currentCuisine?: string;
  currentSort?: string;
}

const {
  categories = [],
  cuisines = [],
  currentCategory = "",
  currentCuisine = "",
  currentSort = "newest",
} = Astro.props;

// Sort options
const sortOptions = [
  { value: "newest", label: "Newest First" },
  { value: "title", label: "Alphabetical" },
  { value: "cookTime", label: "Cooking Time" },
  { value: "portions", label: "Portions" },
];

const categoriesOptions = categories.map((category: string) => ({
  value: category,
  label: capitalize(category),
}));
const cuisinesOptions = cuisines.map((cuisine: string) => ({
  value: cuisine,
  label: capitalize(cuisine),
}));
---

<div class="bg-white rounded-lg shadow-md p-6 min-w-60">
  <h2 class="text-3xl font-bold mb-10">Filters</h2>

  <!-- Sort options -->
  <FilterSection
    title="Sort By"
    options={sortOptions}
    currentValue={currentSort}
    paramKey="sort"
    currentCategory={currentCategory}
    currentCuisine={currentCuisine}
  />

  <!-- Category filter -->
  <FilterSection
    title="Categories"
    options={categoriesOptions}
    currentValue={currentCategory}
    paramKey="category"
    currentSort={currentSort}
    currentCuisine={currentCuisine}
  />

  <!-- Cuisine filter -->
  <FilterSection
    title="Cuisines"
    options={cuisinesOptions}
    currentValue={currentCuisine}
    paramKey="cuisine"
    currentSort={currentSort}
    currentCategory={currentCategory}
  />
</div>

<script>
  // Helper function to get the initial state from localStorage
  const getInitialState = (section: string) => {
    const savedState = localStorage.getItem(`accordion-${section}`);
    return savedState ? JSON.parse(savedState) : true; // Default to expanded if no saved state
  };

  // Helper function to save the state to localStorage
  const saveState = (section: string, isExpanded: boolean) => {
    localStorage.setItem(`accordion-${section}`, JSON.stringify(isExpanded));
  };

  // Initialize accordion state on page load
  document.querySelectorAll(".accordion-button").forEach((button) => {
    const section = button.getAttribute("data-section")!;
    const isExpanded = getInitialState(section);

    // Set initial state
    button.setAttribute("aria-expanded", isExpanded);
    const content = button.nextElementSibling!;
    content.classList.toggle("hidden", !isExpanded);

    const icon = button.querySelector(".accordion-icon")!;
    icon.classList.toggle("rotate-180", isExpanded);

    // Add click event listener
    button.addEventListener("click", () => {
      const isExpanded = button.getAttribute("aria-expanded") === "true";
      const newState = !isExpanded;

      // Update UI
      button.setAttribute("aria-expanded", newState.toString());
      content.classList.toggle("hidden", isExpanded);
      icon.classList.toggle("rotate-180", newState);

      // Save state to localStorage
      saveState(section, newState);
    });
  });
</script>
