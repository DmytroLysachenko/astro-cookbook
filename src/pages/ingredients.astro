---
import Pagination from "@/components/Pagination.astro";
import { db } from "@/db";
import { ingredients } from "@/db/schema/ingredients";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { buildFilterUrl, capitalize } from "@/lib/utils";
import { count } from "drizzle-orm";

export const prerender = false;

// Get search params for pagination and sorting
const { searchParams } = Astro.url;
const currentPage = Number(searchParams.get("page")) || 1;
const pageSize = 20; // Number of ingredients per page
const sortBy = searchParams.get("sort") || "name";
const sortOrder = searchParams.get("order") || "asc";

const categoriesResult = await db
  .select({ category: ingredients.category })
  .from(ingredients)
  .groupBy(ingredients.category);
const categories = categoriesResult.map((row) => row.category);

console.log(categories);

let categoryFilter = searchParams.get("category");

// Fetch total count for pagination
const countResult = await db
  .select({ count: count(ingredients) })
  .from(ingredients);

const totalIngredients = Number(countResult[0].count);

const totalPages = Math.ceil(totalIngredients / pageSize);

// Execute query
const ingredientsList = await db
  .select()
  .from(ingredients)
  .offset(pageSize * (currentPage - 1))
  .limit(pageSize);

// Calculate pagination

// Get all categories for filter dropdown

// Helper function to format numeric values
function formatNumber(value: number | string, decimals = 1): string {
  return Number(value).toFixed(decimals);
}

// Build the base URL for pagination
const baseUrl = `/ingredients?sort=${sortBy}&order=${sortOrder}${categoryFilter ? `&category=${categoryFilter}` : ""}&page=`;
---

<BaseLayout
  title="Ingredients Nutritional Facts"
  description="All possible ingredients nutritional data"
>
  <h1 class="text-3xl font-bold mb-6">Ingredients Nutritional Facts</h1>

  <div
    class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
  >
    <!-- Category Filter -->
    <div>
      <label
        for="category-filter"
        class="block text-sm font-medium mb-1"
        >Filter by Category:</label
      >
      <select
        id="category-filter"
        class="rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 px-2"
        onchange="window.location.href=`/ingredients?sort=${sortBy}&order=${sortOrder}&category=${this.value}`"
      >
        <option
          value=""
          class="px-2"
          >All Categories</option
        >
        {
          categories.map((category) => (
            <option
              value={category}
              selected={category === categoryFilter}
            >
              {capitalize(category).replace("_", " ")}
            </option>
          ))
        }
      </select>
    </div>

    <!-- Sort Controls -->
    <div>
      <label
        for="sort-by"
        class="block text-sm font-medium mb-1"
        >Sort by:</label
      >
      <div class="flex gap-8">
        <select
          id="sort-by"
          class="rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        >
          <option
            value="name"
            selected={sortBy === "name"}
            >Name</option
          >
          <option
            value="calories"
            selected={sortBy === "calories"}
            >Calories</option
          >
          <option
            value="protein"
            selected={sortBy === "protein"}
            >Protein</option
          >
          <option
            value="totalFat"
            selected={sortBy === "totalFat"}
            >Total Fat</option
          >
          <option
            value="totalCarbs"
            selected={sortBy === "totalCarbs"}
            >Total Carbs</option
          >
        </select>

        <select
          id="sort-order"
          class="rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        >
          <option
            value="asc"
            selected={sortOrder === "asc"}
            >Ascending</option
          >
          <option
            value="desc"
            selected={sortOrder === "desc"}
            >Descending</option
          >
        </select>
      </div>
    </div>
  </div>

  <!-- Ingredients Table -->
  <div class="overflow-x-auto">
    <table
      class="min-w-full bg-white border border-secondary/50 shadow-md rounded-lg"
    >
      <thead class="bg-gray-50">
        <tr>
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Name</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Category</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Calories</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Protein (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Total Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Sat. Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Trans Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Poly. Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Mono. Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Cholesterol (mg)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Sodium (mg)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Total Carbs (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Fiber (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Sugars (g)</th
          >
        </tr>
      </thead>
      <tbody class="divide-y divide-secondary/50">
        {
          ingredientsList.map((ingredient) => (
            <tr class="hover:bg-gray-50 border border-t-1 border-">
              <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                {ingredient.name}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {capitalize(ingredient.category).replace("_", " ")}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.calories)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.protein)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.totalFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.saturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.transFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.polyunsaturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.monounsaturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.cholesterol)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.sodium)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.totalCarbs)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.dietaryFiber)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.sugars)}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  {
    totalPages > 1 && (
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={baseUrl}
      />
    )
  }
</BaseLayout>
