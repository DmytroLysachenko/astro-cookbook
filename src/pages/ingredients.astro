---
import { buildFilterUrl, capitalize, formatNumber } from "@/lib/utils";
import { db } from "@/db";
import { ingredients } from "@/db/schema/ingredients";
import { asc, count, desc, eq } from "drizzle-orm";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Selector } from "@/components/react/recipes/CustomSelector";
import { INGREDIENTS_PER_PAGE } from "@/constants";
import Pagination from "@/components/astro/pages-structure/Pagination.astro";

export const prerender = false;

type TSortOption = "name" | "calories" | "protein" | "totalFat" | "totalCarbs";
type TSortOrder = "asc" | "desc";

const pageSize = INGREDIENTS_PER_PAGE;

const categories = (
  await db
    .select({ category: ingredients.category })
    .from(ingredients)
    .groupBy(ingredients.category)
).map((row) => row.category);
type TCategoryFilterOption = (typeof categories)[number];

const validSortFields: TSortOption[] = [
  "name",
  "calories",
  "protein",
  "totalFat",
  "totalCarbs",
];
const validSortOrders: TSortOrder[] = ["asc", "desc"];

const { searchParams } = Astro.url;

const currentPage = Math.max(1, Number(searchParams.get("page"))) || 1;
const sortBy = validSortFields.includes(searchParams.get("sort") as TSortOption)
  ? (searchParams.get("sort") as TSortOption)
  : "name";
const sortOrder = validSortOrders.includes(
  searchParams.get("order") as TSortOrder
)
  ? (searchParams.get("order") as TSortOrder)
  : "asc";
const categoryFilter = categories.includes(
  searchParams.get("category") as TCategoryFilterOption
)
  ? (searchParams.get("category") as TCategoryFilterOption)
  : null;

const baseQuery = db
  .select()
  .from(ingredients)
  .orderBy(
    sortOrder === "asc" ? asc(ingredients[sortBy]) : desc(ingredients[sortBy])
  );
const totalIngredientsQuery = db
  .select({ count: count().as("count") })
  .from(ingredients);

if (categoryFilter) {
  baseQuery.where(eq(ingredients.category, categoryFilter));
  totalIngredientsQuery.where(eq(ingredients.category, categoryFilter));
}

const [countResult, ingredientsList] = await Promise.all([
  totalIngredientsQuery,
  baseQuery.offset(pageSize * (currentPage - 1)).limit(pageSize),
]);

const totalIngredients = Number(countResult[0].count);
const totalPages = Math.ceil(totalIngredients / pageSize);

const baseUrl = buildFilterUrl("/ingredients", {
  sort: sortBy,
  order: sortOrder,
  category: categoryFilter || "all",
});
---

<BaseLayout
  title="Ingredients Nutritional Facts"
  description="All possible ingredients nutritional data"
>
  <h1 class="text-3xl font-bold mb-6">Ingredients Nutritional Facts</h1>

  <div
    class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
  >
    <div class="min-h-[64px]">
      <label class="block text-sm font-medium mb-1">Filter by Category:</label>
      <Selector
        id="category"
        client:only="react"
        options={[
          { value: "all", label: "All Categories" },
          ...categories.map((category) => ({
            value: category,
            label: capitalize(category).replace("_", " "),
          })),
        ]}
        defaultValue={categoryFilter ?? "all"}
        className="w-[200px]"
      />
    </div>

    <div class="min-h-[128px] sm:min-h-[64px] flex gap-4">
      <label class="block text-sm font-medium mb-1"
        >Sort by:
        <div class="flex flex-col sm:flex-row gap-8">
          <Selector
            id="sort"
            client:only="react"
            options={validSortFields.map((field) => ({
              value: field,
              label: capitalize(field),
            }))}
            defaultValue={sortBy}
            className="w-[150px]"
          />
        </div>
      </label>
      <label class="block text-sm font-medium mb-1"
        >Sort order:
        <Selector
          client:only="react"
          id="order"
          options={validSortOrders.map((order) => ({
            value: order,
            label: capitalize(order),
          }))}
          defaultValue={sortOrder}
          className="w-[150px]"
        />
      </label>
    </div>
  </div>

  <div class="overflow-x-auto">
    <table
      class="min-w-full bg-white border border-secondary/50 shadow-md rounded-lg"
    >
      <thead class="bg-gray-50">
        <tr>
          {
            [
              "Name",
              "Category",
              "Calories",
              "Protein (g)",
              "Total Fat (g)",
              "Sat. Fat (g)",
              "Trans Fat (g)",
              "Poly. Fat (g)",
              "Mono. Fat (g)",
              "Cholesterol (mg)",
              "Sodium (mg)",
              "Total Carbs (g)",
              "Fiber (g)",
              "Sugars (g)",
            ].map((header) => (
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                {header}
              </th>
            ))
          }
        </tr>
      </thead>
      <tbody class="divide-y divide-secondary/50">
        {
          ingredientsList.map((ingredient) => (
            <tr class="hover:bg-gray-50 border border-t-1 border-">
              <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                {ingredient.name}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {capitalize(ingredient.category).replace("_", " ")}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.calories)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.protein)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.totalFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.saturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.transFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.polyunsaturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.monounsaturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.cholesterol)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.sodium)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.totalCarbs)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.dietaryFiber)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.sugars)}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  {
    totalPages > 1 && (
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={`${baseUrl}&page=`}
      />
    )
  }
</BaseLayout>
