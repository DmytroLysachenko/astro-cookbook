---
import { buildFilterUrl, capitalize, formatTableValue } from "@/lib/utils";
import { db } from "@/db";
import { ingredients } from "@/db/schema/ingredients";
import { asc, count, desc, eq } from "drizzle-orm";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Selector } from "@/components/react/recipes/CustomSelector";
import { INGREDIENTS_PER_PAGE, INGREDIENTS_TABLE_COLUMNS } from "@/constants";
import Pagination from "@/components/astro/pages-structure/Pagination.astro";

export const prerender = false;

type TSortOption = "name" | "calories" | "protein" | "totalFat" | "totalCarbs";
type TSortOrder = "asc" | "desc";

const pageSize = INGREDIENTS_PER_PAGE;

const categories = (
  await db
    .select({ category: ingredients.category })
    .from(ingredients)
    .groupBy(ingredients.category)
).map((row) => row.category);
type TCategoryFilterOption = (typeof categories)[number];

const validSortFields: TSortOption[] = [
  "name",
  "calories",
  "protein",
  "totalFat",
  "totalCarbs",
];
const validSortOrders: TSortOrder[] = ["asc", "desc"];

const { searchParams } = Astro.url;

const currentPage = Math.max(1, Number(searchParams.get("page"))) || 1;
const sortBy = validSortFields.includes(searchParams.get("sort") as TSortOption)
  ? (searchParams.get("sort") as TSortOption)
  : "name";
const sortOrder = validSortOrders.includes(
  searchParams.get("order") as TSortOrder
)
  ? (searchParams.get("order") as TSortOrder)
  : "asc";
const categoryFilter = categories.includes(
  searchParams.get("category") as TCategoryFilterOption
)
  ? (searchParams.get("category") as TCategoryFilterOption)
  : null;

const baseQuery = db
  .select()
  .from(ingredients)
  .orderBy(
    sortOrder === "asc" ? asc(ingredients[sortBy]) : desc(ingredients[sortBy])
  );
const totalIngredientsQuery = db
  .select({ count: count().as("count") })
  .from(ingredients);

if (categoryFilter) {
  baseQuery.where(eq(ingredients.category, categoryFilter));
  totalIngredientsQuery.where(eq(ingredients.category, categoryFilter));
}

const [countResult, ingredientsList] = await Promise.all([
  totalIngredientsQuery,
  baseQuery.offset(pageSize * (currentPage - 1)).limit(pageSize),
]);

const totalIngredients = Number(countResult[0].count);
const totalPages = Math.ceil(totalIngredients / pageSize);

const baseUrl = buildFilterUrl("/ingredients", {
  sort: sortBy,
  order: sortOrder,
  category: categoryFilter || "all",
});
---

<BaseLayout
  title="Cooking Spot | Ingredients Nutritional Facts"
  description="Discover the nutritional facts of cooking ingredients. Get information on calories, protein, fat, and carbohydrates for a wide range of ingredients."
>
  <div class="mx-auto px-4">
    <h1 class="text-3xl font-bold mb-6">
      Ingredients Nutritional Facts <span
        class="text-sm text-foreground/60 font-body">(per 100g)</span
      >
    </h1>

    <div
      class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
    >
      <div class="min-h-[64px]">
        <label class="block text-sm font-medium mb-1">Filter by Category:</label
        >
        <div
          id="category-selector-loader"
          class="flex items-center justify-between h-9 w-[200px] bg-gray-200 rounded-md px-4 animate-pulse"
        >
        </div>
        <Selector
          id="category"
          client:only="react"
          options={[
            { value: "all", label: "All Categories" },
            ...categories.map((category) => ({
              value: category,
              label: capitalize(category).replace("_", " "),
            })),
          ]}
          defaultValue={categoryFilter ?? "all"}
          className="w-[200px]"
        />
      </div>

      <div
        class="min-h-[128px] sm:min-h-[64px] flex flex-col sm:flex-row gap-4"
      >
        <label class="block text-sm font-medium mb-1"
          >Sort by:
          <div
            id="sort-selector-loader"
            class="flex items-center justify-between h-9 w-[150px] bg-gray-200 rounded-md px-4 animate-pulse"
          >
          </div>

          <Selector
            id="sort"
            client:only="react"
            options={validSortFields.map((field) => ({
              value: field,
              label: capitalize(field),
            }))}
            defaultValue={sortBy}
            className="w-[150px]"
          />
        </label>
        <label class="block text-sm font-medium mb-1"
          >Sort order:
          <div
            id="order-selector-loader"
            class="flex items-center justify-between h-9 w-[150px] bg-gray-200 rounded-md px-4 animate-pulse"
          >
          </div>
          <Selector
            client:only="react"
            id="order"
            options={validSortOrders.map((order) => ({
              value: order,
              label: capitalize(order),
            }))}
            defaultValue={sortOrder}
            className="w-[150px]"
          />
        </label>
      </div>
    </div>
    <div class="overflow-x-auto">
      <table
        class="w-full bg-white border border-secondary/50 shadow-md rounded-lg"
      >
        <thead class="bg-gray-50">
          <tr>
            {
              INGREDIENTS_TABLE_COLUMNS.map(({ data, title }) => (
                <th
                  data-column={data}
                  class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  {title}
                </th>
              ))
            }
          </tr>
        </thead>
        <tbody class="divide-y divide-secondary/50">
          {
            ingredientsList.map((ingredient) => (
              <tr class="hover:bg-gray-50 border border-t-1 border-">
                {INGREDIENTS_TABLE_COLUMNS.map(({ data }) => (
                  <th
                    data-column={data}
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    {formatTableValue(
                      ingredient[data as keyof typeof ingredient]
                    )}
                  </th>
                ))}
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>

    {
      totalPages > 1 && (
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          baseUrl={`${baseUrl}&page=`}
        />
      )
    }
  </div>
</BaseLayout>
