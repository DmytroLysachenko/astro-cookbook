---
import { buildFilterUrl } from "@/lib/utils";
import { db } from "@/db";
import { ingredients } from "@/db/schema/ingredients";
import { capitalize } from "@/lib/utils";
import { asc, count, desc, eq } from "drizzle-orm";
import Pagination from "@/components/Pagination.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Selector } from "@/components/react/CustomSelector";
import { INGREDIENTS_PER_PAGE } from "@/constants";

type TSortOption = "name" | "calories" | "protein" | "totalFat" | "totalCarbs";
type TSortOrder = "asc" | "desc";

export const prerender = false;

const pageSize = INGREDIENTS_PER_PAGE;

const categoriesResult = await db
  .select({ category: ingredients.category })
  .from(ingredients)
  .groupBy(ingredients.category);

const categories = categoriesResult.map((row) => row.category);

type TCategoryFilterOption = (typeof categories)[number];

const validSortFields: TSortOption[] = [
  "name",
  "calories",
  "protein",
  "totalFat",
  "totalCarbs",
];

const validSortOrders: TSortOrder[] = ["asc", "desc"];

const { searchParams } = Astro.url;

let currentPage = 1;
let sortBy: TSortOption = "name";
let sortOrder: TSortOrder = "asc";
let categoryFilter: TCategoryFilterOption | null = null;

const pageParam = searchParams.get("page");
if (pageParam && !isNaN(Number(pageParam))) {
  currentPage = Math.max(1, Number(pageParam));
}

const sortByParam = searchParams.get("sort");

// @ts-expect-error Type assertion required: The runtime check ensures `sortByParam` is a valid `TSortOption`, but TypeScript cannot infer this due to the dynamic nature of `searchParams`.
if (sortByParam && validSortFields.includes(sortByParam)) {
  sortBy = sortByParam as TSortOption;
}

const sortOrderParam = searchParams.get("order");

// @ts-expect-error Type assertion required: Similar to sortBy, the runtime check validates `sortOrderParam` against `validSortOrders`, but TypeScript needs explicit type confirmation.
if (sortOrderParam && validSortOrders.includes(sortOrderParam)) {
  sortOrder = sortOrderParam as TSortOrder;
}

const categoryParam = searchParams.get("category");
if (categoryParam) {
  // @ts-expect-error Type assertion required: The runtime check verifies `categoryParam` against the `categories` array, but TypeScript requires a type assertion to proceed.
  categoryFilter = categories.includes(categoryParam) ? categoryParam : null;
}

let totalIngredientsQuery = db
  .select({ count: count().as("count") })
  .from(ingredients);
if (categoryFilter) {
  // @ts-expect-error Type refinement required: TypeScript cannot infer the type narrowing within the conditional block. Explicitly asserting the type allows the query to proceed.
  totalIngredientsQuery = totalIngredientsQuery.where(
    eq(ingredients.category, categoryFilter)
  );
}

let ingredientsQuery = db
  .select()
  .from(ingredients)
  .orderBy(
    sortOrder === "asc" ? asc(ingredients[sortBy]) : desc(ingredients[sortBy])
  )
  .offset(pageSize * (currentPage - 1))
  .limit(pageSize);

if (categoryFilter) {
  // @ts-expect-error Type refinement required: Similar to the total count query, TypeScript requires explicit type narrowing for the category filter.
  ingredientsQuery = ingredientsQuery.where(
    eq(ingredients.category, categoryFilter)
  );
}

const [countResult, ingredientsList] = await Promise.all([
  totalIngredientsQuery,
  ingredientsQuery,
]);

const totalIngredients = Number(countResult[0].count);
const totalPages = Math.ceil(totalIngredients / pageSize);

// Helper function to format numeric values
function formatNumber(value: number | string, decimals = 1): string {
  return Number(value).toFixed(decimals);
}

const baseUrl = buildFilterUrl("/ingredients", {
  sort: sortBy,
  order: sortOrder,
  category: categoryFilter || "all", // Use "all" as the default value
});
---

<BaseLayout
  title="Ingredients Nutritional Facts"
  description="All possible ingredients nutritional data"
>
  <h1 class="text-3xl font-bold mb-6">Ingredients Nutritional Facts</h1>

  <div
    class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
  >
    <!-- Category Filter -->
    <div class="min-h-[64px]">
      <label class="block text-sm font-medium mb-1">Filter by Category:</label>
      <Selector
        id="category"
        client:only="react"
        options={[
          { value: "all", label: "All Categories" },
          ...categories.map((category) => ({
            value: category,
            label: capitalize(category).replace("_", " "),
          })),
        ]}
        defaultValue={categoryFilter ?? "all"}
        className="w-[200px]"
      />
    </div>

    <!-- Sort Controls -->
    <div class="min-h-[128px] sm:min-h-[64px]">
      <label class="block text-sm font-medium mb-1">Sort by:</label>
      <div class="flex flex-col sm:flex-row gap-8">
        <Selector
          id="sort"
          client:only="react"
          options={[
            { value: "name", label: "Name" },
            { value: "calories", label: "Calories" },
            { value: "protein", label: "Protein" },
            { value: "totalFat", label: "Total Fat" },
            { value: "totalCarbs", label: "Total Carbs" },
          ]}
          defaultValue={sortBy}
          className="w-[150px]"
        />

        <Selector
          client:only="react"
          id="order"
          options={[
            { value: "asc", label: "Ascending" },
            { value: "desc", label: "Descending" },
          ]}
          defaultValue={sortOrder}
          className="w-[150px]"
        />
      </div>
    </div>
  </div>

  <!-- Ingredients Table -->
  <div class="overflow-x-auto">
    <table
      class="min-w-full bg-white border border-secondary/50 shadow-md rounded-lg"
    >
      <thead class="bg-gray-50">
        <tr>
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Name</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Category</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Calories</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Protein (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Total Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Sat. Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Trans Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Poly. Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Mono. Fat (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Cholesterol (mg)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Sodium (mg)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Total Carbs (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Fiber (g)</th
          >
          <th
            class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Sugars (g)</th
          >
        </tr>
      </thead>
      <tbody class="divide-y divide-secondary/50">
        {
          ingredientsList.map((ingredient) => (
            <tr class="hover:bg-gray-50 border border-t-1 border-">
              <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                {ingredient.name}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {capitalize(ingredient.category).replace("_", " ")}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.calories)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.protein)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.totalFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.saturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.transFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.polyunsaturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.monounsaturatedFat)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.cholesterol)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.sodium)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.totalCarbs)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.dietaryFiber)}
              </td>
              <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500 text-center">
                {formatNumber(ingredient.sugars)}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  {
    totalPages > 1 && (
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={`${baseUrl}&page=`}
      />
    )
  }
</BaseLayout>
